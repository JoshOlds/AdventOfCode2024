// The core concept for this day is to create a 2D array of PuzzleTile objects that track state of each tile on the 'map'.
// These PuzzleTile objects will track how many times each tile has been traversed, and if there is an obstacle at that tile.
// A Guard object is also created that tracks its own position and heading, and has functions to step forward or rotate.
// Once all these functions are in place, simply run a simulation that steps the guard forward or rotates based on map obstacles.
// Continue this loop until the guard eventually attempts to step out of the map boundaries!

// Part 2 was a surprise, and I didn't initially feel that my 'Map as object' and Guard simulation method was going to work.
// However, I realized that you can detect a loop if any map tile is traveres IN THE SAME DIRECTION more than once.
// I added fields to the PuzzleTile class that tracks what direction it has been traversed, and as the guard walks over
// the tiles, this new field is updated. Added a check when peeking the next tile to see if it has already been traversed
// in this direction.
// Now we can detect loops, the next thing to do is literally brute-force try every map permutation to see if there is a loop.
// This is an extremely expensive way to do it, since we are running the Guard walking sim for every map! It took about 3 minutes
// to run all mutations, but it worked!

using Godot;
using System;
using System.Collections.Generic;
using System.Linq;


struct Coord
{
    public Coord(int x, int y)
    {
        X = x;
        Y = y;
    }

    public Coord(Coord other)
    {
        X = other.X;
        Y = other.Y;
    }

    public int X;
    public int Y;
}

/// <summary>
/// Wrap up statistics about tile traversal in a nice struct.
/// </summary>
struct TraverseStats
{
    public TraverseStats()
    {
        UniqueTraverseCount = 0;
        TotalTraverseCount = 0;
    }
    public int UniqueTraverseCount;
    public int TotalTraverseCount;
}

/// <summary>
/// Represents a single Map Tile with metadata about obstacles and visit counts and direction.
/// </summary>
class PuzzleTile
{
    public PuzzleTile(bool obstacle)
    {
        Obstacle = obstacle;
        VisitCount = 0;
        DirectionVisited = new Dictionary<GuardAgent.Direction, bool>();
        DirectionVisited[GuardAgent.Direction.UP] = false;
        DirectionVisited[GuardAgent.Direction.DOWN] = false;
        DirectionVisited[GuardAgent.Direction.LEFT] = false;
        DirectionVisited[GuardAgent.Direction.RIGHT] = false;
    }
    
    public bool Obstacle;
    public int VisitCount;
    public Dictionary<GuardAgent.Direction, bool> DirectionVisited;
}

/// <summary>
/// A 2D map of PuzzleTiles. Used to represent the puzzle input in memory with some metadata.
/// </summary>
class PuzzleMap
{
    public PuzzleMap(int xDimension, int yDimension)
    {
        Map = new PuzzleTile[xDimension, yDimension];
        XDim = xDimension;
        YDim = yDimension;
    }

    public PuzzleTile[,] Map;
    public int XDim;
    public int YDim;
    public GuardAgent Guard;
}

/// <summary>
/// Guard object with methods to step through the map and rotate.
/// </summary>
class GuardAgent
{
    public enum Direction
    {
        UP,
        DOWN,
        LEFT,
        RIGHT
    }

    public GuardAgent(int xPos, int yPos, Direction direction)
    {
        Coordinate.X = xPos;
        Coordinate.Y = yPos;
        StepCount = 0;
        GuardDirection = direction;
    }

    public void StepOnce()
    {
        if (GuardDirection == Direction.UP) Coordinate.Y--;
        else if (GuardDirection == Direction.DOWN) Coordinate.Y++;
        else if (GuardDirection == Direction.RIGHT) Coordinate.X++;
        else if (GuardDirection == Direction.LEFT) Coordinate.X--;
        StepCount++;
    }

    public Coord PeekNextPosition()
    {
        Coord peekedPosition = new Coord(Coordinate);
        if (GuardDirection == Direction.UP) peekedPosition.Y--;
        else if (GuardDirection == Direction.DOWN) peekedPosition.Y++;
        else if (GuardDirection == Direction.RIGHT) peekedPosition.X++;
        else if (GuardDirection == Direction.LEFT) peekedPosition.X--;
        return peekedPosition;
    }

    public void Rotate()
    {
        if (GuardDirection == Direction.UP) GuardDirection = Direction.RIGHT;
        else if (GuardDirection == Direction.DOWN) GuardDirection = Direction.LEFT;
        else if (GuardDirection == Direction.RIGHT) GuardDirection = Direction.DOWN;
        else if (GuardDirection == Direction.LEFT) GuardDirection = Direction.UP;
    }

    public Coord Coordinate;
    public int StepCount;
    public Direction GuardDirection;
}

public partial class day6 : Node
{

    // Called when the node enters the scene tree for the first time.
    public override void _Ready()
    {
        GD.Print("Day 6 Part 1: ");
        ExecutePart1();
        GD.Print("\nDay 6 Part 2: Brute force solving....");
        ExecutePart2();
        GD.Print("Done!");
    }

    public void ExecutePart1()
    {
        PuzzleMap map = GeneratePuzzleMap();
        WalkMap(map);
        TraverseStats stats = GetTraverseStats(map);
        GD.Print(stats.UniqueTraverseCount);
    }

    public void ExecutePart2()
    {
        PuzzleMap map = GeneratePuzzleMap();
        int loopCount = 0;
        for (int x = 0; x < map.XDim - 1; x++)
        {
            for (int y = 0; y < map.YDim - 1; y++)
            {
                PuzzleMap newMap = GeneratePuzzleMap();
                newMap.Map[x, y].Obstacle = true;
                if(x == newMap.Guard.Coordinate.X && y == newMap.Guard.Coordinate.Y) continue; // Short circuit if we are on the guard's position
                if (WalkMap(newMap) == false)
                {
                    loopCount++;
                }
            }
            GD.Print("Finished Evaluating Row: " + x +" of: " + map.XDim);
        }
        GD.Print(loopCount);

    }

    /// <summary>
    /// Creates a PuzzleMap from the puzzle input data.
    /// </summary>
    /// <returns></returns>
    private PuzzleMap GeneratePuzzleMap()
    {
        string input = GetPuzzleInput();
        List<string> inputLines = input.Split("\n").ToList();
        int mapYDim = inputLines.Count;
        int mapXDim = inputLines[0].Length;

        PuzzleMap map = new PuzzleMap(mapXDim, mapYDim);

        for (int y = 0; y < mapYDim; y++)
        {
            for (int x = 0; x < mapXDim; x++)
            {
                char symbol = inputLines[y][x];
                if (symbol == '#')
                {
                    map.Map[x, y] = new PuzzleTile(true);
                }
                else
                {
                    map.Map[x, y] = new PuzzleTile(false);
                }

                if (symbol == '^')
                {
                    map.Guard = new GuardAgent(x, y, GuardAgent.Direction.UP);
                }
            }
        }

        return map;
    }

    /// <summary>
    /// Runs a Guard simulation to walk the guard through the map. Loops until either an infinite loop is detected or the Guard leaves the map.
    /// </summary>
    /// <param name="map"></param>
    /// <returns></returns>
    private bool WalkMap(PuzzleMap map)
    {
        while (true)
        {
            Coord nextGuardPosition = map.Guard.PeekNextPosition();
            
            // Check if next position is off the map. Return the coordinate that would have brought us off the edge
            if (nextGuardPosition.X > map.XDim - 1 || nextGuardPosition.Y > map.YDim - 1 || nextGuardPosition.X < 0 ||
                nextGuardPosition.Y < 0)
            {
                return true;
            }
            
            // Get the next tile the guard is going to step onto
            PuzzleTile nextTile = map.Map[nextGuardPosition.X, nextGuardPosition.Y];
            
            // check if we are in a loop (have seen this spot and direction before)
            if (nextTile.DirectionVisited[map.Guard.GuardDirection] == true)
            {
                return false;
            }
            // Otherwise, rotate if next tile is an obstacle, or step once if it is not
            if(nextTile.Obstacle == true) map.Guard.Rotate();
            else
            {
                map.Guard.StepOnce();
                nextTile.VisitCount++;
                nextTile.DirectionVisited[map.Guard.GuardDirection] = true;
            }
            
        }
    }

    /// <summary>
    /// Evaluates a completed map (already walked) and returns stats regarding tile traversal.
    /// </summary>
    /// <param name="map"></param>
    /// <returns></returns>
    private TraverseStats GetTraverseStats(PuzzleMap map)
    {
        TraverseStats stats = new TraverseStats();
        for (int y = 0; y < map.YDim; y++)
        {
            for (int x = 0; x < map.XDim; x++)
            {
                int visits = map.Map[x, y].VisitCount;
                if (visits > 0)
                {
                    stats.UniqueTraverseCount++;
                    stats.TotalTraverseCount += visits;
                }
            }
        }

        return stats;
    }

    public string GetPuzzleInput()
    {
        return
            @"#.....#.........#.........................#...#....................#......#.......#...........#........#..........................
..................#......#..................................#..................#....#...............#.#....................#.....#
..............#...........#......#.#.......................................#..................#......#............................
##...............................#..........#...................#.......#................................................#........
#.....................#.......##................#...#..........#............................................#...#....#............
........#........#.............#...............#...##...................#...........#...........#.......#...........##.#...#.#....
................................................#....................................................#.#..........................
.........#....#.....................................................................##......#.....#........#...............#......
.............................#.....#.........#......................#...#................#.#..........#...........................
........................................#.........................................................................#...............
.........................................#.......#.............#.#.........................#....#.....#...........#...............
...#............##...................................#...........#........................................#..................#....
....#.................#.......#............#.....#...........#................................#.#.#...........................#...
...#................................................................#.......................#.#........................#..#...#...
............................#......#.......#...............................................................................#....#.
.......................................................#.............................#...#.......#.............#............#.....
.....................................................................#......................................#.................##..
......#.................#......................................................#................#.................................
...............................................................................#...............#............................#.....
........................................................#......................##..................#........#.....................
.#.................................#....#........#..#........#.................................#...............#..........#.#.....
.................#................#...................#.#.....#................#..................#.........#.....................
...............#........................................................................#............#..........#.................
....................#..................#...........#................................#.....................#...#......#............
.............#..#..................................#..............................#...............................#...#......#...#
..................#.............................................................#...............................#......#..........
................................................................#....#..............#.............................#...............
.............#............#............................#...#........#...#.........................##..............................
....................................#....#.............#...#....#..........................#..................#.#............#....
.......................#........................................................................................#.................
........#..................................#..#.........#.......................................#......#..............#...........
..........#............#............#..................#.......#..........#...................................#...........#.......
....#..............................#.....#...........##...#.....................#...........................#..........#..........
................................#..#.................................................................#...#...................#....
..#....................#..........................................................................#...............................
..................#........................#.......#..#......................................................................#....
.#.....#......................#.....................................#.........................................#...................
..#....#...........................................#..........................................................................#...
..#.....#........................................................................#........#.#.............................#.......
................#......................................#...............#....................................#..........#..........
....................................#........................##.............................#..........................#........#.
.#..............#..............................#......................................................#...........................
...#.#......................#.................#..................................#...........................#....................
..#....#..........................................#...#.......#..............................................#....................
.......#.................#............................#..................................................#..#....................#
.....##.#...........#...........................................#.....................................................#...........
................#.#........................................................................#..........#..#....#.##................
..........#........#............................................#.#......................................#.............#..........
............................................................#..........................................#..........................
.......#........#.................#....................................................................#..........................
........................................................#..........................#..............#...............................
.............#.#....................................#.................##............#.#.............................#..........#..
.##.............................................^........#...................#.....#...................................#..........
...............#..#..#................................................................#...........................#...............
.#.......##...........#.........#..................#......#..........#...#....#...................#...............................
....#................................................................#...................#........................................
.........#............#..#......................................................#..#..............................................
...#.............................................................#......#....#....................................#...#....#......
.....#.........#.................#....................#..................#..#.#.............#......#.....................#........
...........#.......#.##.#......#..#.............................#...........#..............................................#......
................................................................................................#.#......#......................#.
##..................................##....#.................#...............##....................................................
.....#.............................#.............................................#................#.....................#.........
............#..............................#.....................#...............#..#....#....#...................................
.........#.........................#...#................................................#........................................#
.#..........................................#.......#.....................................................#..............#...#....
#.........#...........#.............#..........................#........................................#.........................
.......................................................................#.............................................#............
....#..............#..#......................................................#..........................................#....#....
........#...................................#...#................#.........................................................#...#..
.........................................................#..#..#..#..........#...........#...........#............#...............
..............................................##......#.................#..............................................#..........
.............................#..........#......#.....#....#.............#..............................................#...#..#...
......................................##......#.....................................#.......#....................#................
...................................................................................................#..............................
.................................#..................................................................................#.............
........#...................................................................#...................##............#...................
...............................#..................................................................................................
...............................#...........................................................#...............##..............#......
........................................................................#..........#..................................#...........
................#.................................................................................................................
...#.................#..........#...........#...................................#......................#..........................
.......................#..........................................................#.............#.............#..........#........
..........#..........#.#.................................#........#.............#..#..........................#........#.........#
.................#.........#.#........................#...#.............................................................#......#..
......#.....................................................................#.....#...............#...............#....#..........
......#...##....#..#.......................................##......#......#....#..............#............#....................#.
.#..........#........#...#........##..............#....#...........................#.....#................#...................#...
.........................#........................................................................................................
..........................#.......................#.........#................................................#.#...........#......
......#...#.....#..........#....................#..................................#...#.................................#........
.......................................................#............................#.....................#.#.................#...
..............#...............#......................#......#...................#.....................#.........#................#
....#.........#...............................................................#.......#.......#...........#.................#.....
.......................#.........................#....................................#...........................................
...............#.................#..........#........................#...##.......................................................
....##..................#..#..................................................................................#.................#.
..................#.............#......................#...............#................#.#.......................................
........................#....#................................................#...#..........#....#.......#.......................
.........................................................#..............#.............#.#.......#..................#......#...#...
...........#...........................#.........#..................................#.....................................#.......
.#..........................................#................................................................#...........#........
..................................##....................#..........#..............#..........#............#.....#.................
##..#..#....#.........................................................#...............#...................................#.......
....#.#...........#............................#....#........#......#.............................................................
#....#.........................#.............#.............................................................#.....#..#.............
............................#......#................#...............................................#.....#............#..........
........................#.............#..................#........................................................................
..#.............#........................................#.................................................#......................
...................#...................#..........#..#.............................................#...........#...#............#.
....#...#..........................##...#...............#....#.....................................#............#.................
..............................#..............................................................###..................................
.................#......................................#.......................##.#............#.................................
............#.........................................#......##.....................#............#................................
....................#..#.............................#...#......................................#....................#.#........#.
....#...........#...........................................#....................................................#................
............#.....#..................................##.........#........#.....................................#..................
......#..............#..................................#...#.......#.............................................................
..........#.................#.......#.........................................................................#...........#.......
...........#..............#................#.....##.#............#........#.......................................................
................#.......................#.........................................................................#...........#...
..............................#............................................#.......#..............................................
..............#..............................#......#..................#....#.....#.................................#........#....
....................##..........#...#..#................#............#.......................#.................................#..
........................##.......#..................#.......#.....................#................#.....................#.....#..
..............#.............#...#......#.........#.................##..#...........#...........#.........................##.......
#........#...........#........#..#............#...........#....#....#......##..............................................#......
........................................#.....................#....................................#........#......#......#.......
.............#........#.............#...........#..#..#.......................................................#......#............
#...................#.#........................................#..................................#...#...........................";
    }
}